---
- hosts: all
  tasks:

    - name: Set the hostname via raspi-config
      become: yes
      command: "raspi-config nonint do_hostname {{ inventory_hostname }}"
      when: ansible_hostname != inventory_hostname
      register: set_hostname
    
    - name: Check if root fs needs to be expanded
      shell: df -h /
      register: root_fs_size
      changed_when: False
      
    - name: Expand the filesystem via raspi-config
      become: yes
      command: raspi-config nonint do_expand_rootfs
      when: root_fs_size.stdout.find("2.0G") > 0
      register: resize_rootfs

    - name: Reboot the Pi
      become: yes
      reboot:
      when: set_hostname.changed or resize_rootfs.changed
      
    - name: Disable the camera via raspi-config
      become: yes
      command: raspi-config nonint do_camera 1
      changed_when: False
 
    - name: Disable VNC via raspi-config
      become: yes
      command: raspi-config nonint do_vnc  1
      changed_when: False

    - name: Disable SPI via raspi-config
      become: yes
      command: raspi-config nonint do_spi 1
      changed_when: False

    - name: Disable I2C via raspi-config
      become: yes
      command: raspi-config nonint do_i2c 1
      changed_when: False

    - name: Disable serial via raspi-config
      become: yes
      command: raspi-config nonint do_serial 1
      changed_when: False

    - name: Disable one wire via raspi-config
      become: yes
      command: raspi-config nonint do_onewire 1
      changed_when: False

    - name: Set the locale via raspi-config
      become: yes
      command: raspi-config nonint do_change_locale en_US.UTF-8
      changed_when: False
          
    - name: Set the keyboard layout via raspi-config
      become: yes
      command: raspi-config nonint do_configure_keyboard us
      changed_when: False

    - name: Update package list
      become: yes
      apt:
        update_cache: yes
      
    - name: Upgrade packages
      become: yes
      apt:
          upgrade: dist

    - name: Install require packages
      become: yes
      apt:
        name:
            - git
            - python3-setuptools
            - xtightvncviewer 
            - vim 
            - cec-utils 
            - xinit 
            - xserver-xorg-legacy 
            - x11-xserver-utils 
            - xfonts-scalable 
            - xfonts-100dpi 
            - xfonts-75dpi 
            - xfonts-base 
            - matchbox-window-manager
            - libcec
        state: present

    - name: Install gunicorn via pip
      become: yes
      pip:
        name: 
          - gunicorn
          - flask
        executable: /usr/bin/pip

    - name: Allow all users to start X11
      become: yes
      lineinfile:
        path: /etc/X11/Xwrapper.config
        regexp: '^allowed_users='
        line: 'allowed_users=anybody'

    - name: Place xinitrc
      copy:
        src: files/.xinitrc
        dest: "{{ ansible_env.HOME }}/.xinitrc"

    - name: Set password and target IP of VNC Server
      become: yes
      lineinfile:
        path: "{{ ansible_env.HOME }}/.xinitrc"
        regexp: '^exec echo'
        line: 'exec echo "{{ vnc_password }}" | xtightvncviewer -viewonly -fullscreen -autopass {{ vnc_server }}:0'

    - name: Place xinit-login.service
      become: yes
      copy:
        src: files/xinit-login.service
        dest: "/etc/systemd/system/xinit-login.service"
      notify:
        - restart X11

    - name: Enable and start xinit-login systemd service
      become: yes
      systemd:
        name: xinit-login
        state: started
        enabled: yes
        masked: no
        daemon_reload: yes

    - name: Place /boot/config.txt
      become: yes
      copy:
        src: files/config.txt
        dest: "/boot/config.txt"

    - name: Configure config.txt
      become: yes
      replace:
        path: "{{ item.path }}"
        regexp: "{{ item.regex }}"
        replace: "{{ item.replace }}"
      with_items:
        - { path: "/boot/config.txt", regex: "^disable_overscan.*", replace: "disable_overscan={{ config_disable_overscan }}" }
        - { path: "/boot/config.txt", regex: "^overscan_left.*", replace: "overscan_left={{ config_overscan_left }}" }
        - { path: "/boot/config.txt", regex: "^overscan_right.*", replace: "overscan_right={{ config_overscan_right }}" }
        - { path: "/boot/config.txt", regex: "^overscan_top.*", replace: "overscan_top={{ config_overscan_top }}" }
        - { path: "/boot/config.txt", regex: "^overscan_bottom.*", replace: "overscan_bottom={{ config_overscan_bottom }}" }
        - { path: "/boot/config.txt", regex: "^framebuffer_width.*", replace: "framebuffer_width={{ config_framebuffer_width }}" }
        - { path: "/boot/config.txt", regex: "^framebuffer_height.*", replace: "framebuffer_height={{ config_framebuffer_height }}" }
        - { path: "/boot/config.txt", regex: "^hdmi_force_hotplug.*", replace: "hdmi_force_hotplug={{ config_hdmi_force_hotplug }}" }
        - { path: "/boot/config.txt", regex: "^hdmi_mode.*", replace: "hdmi_mode={{ config_hdmi_mode }}" }
        - { path: "/boot/config.txt", regex: "^hdmi_drive.*", replace: "hdmi_drive={{ config_hdmi_drive }}" }

    - name: Get flask-hdmi-cec
      become: yes
      git: 
        repo: 'https://github.com/Bouni/flask-hdmi-cec.git'
        dest: '/opt/flask-hdmi-cec'
        
    - name: Place flask-hdmi-cec.service
      become: yes
      copy:
        remote_src: yes
        src: '/opt/flask-hdmi-cec/flask-hdmi-cec.service'
        dest: "/etc/systemd/system/flask-hdmi-cec.service"

    - name: Enable and start flask-hdmi-cec systemd service
      become: yes
      systemd:
        name: flask-hdmi-cec
        state: restarted
        enabled: yes
        masked: no
        daemon_reload: yes

  handlers:
    - name: restart X11
      become: yes
      systemd:
        name: xinit-login
        state: restarted
        daemon_reload: yes
 
